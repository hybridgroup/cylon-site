---
hero: true
social: true
catcher: true
menu_fixed: true
parallaxTop: true

title: Cylon.js - JavaScript framework for robotics, physical computing, and the Internet of Things using Node.js
author: The Hybrid Group
description: Cylon.js is a JavaScript framework for robotics, physical computing, and the Internet of Things using Node.js. It provides a simple, yet powerful way to create JavaScript robots that incorporate multiple, different hardware devices at the same time.
layout: home

hero_title: "JavaScript Robotics, By Your Command"

hero_subtitle: "Next generation robotics framework with support for <a href='#platforms'>36 different platforms</a>"


catcher_phrase: Ready to build the next big thing with JavaScript?
getting_started_button: "<a href='/documentation/getting-started' class='call-to-action'> Get Started</a>"

---

-content_for :black_top_title do
  :markdown
    ## Meet The Code

    Cylon.js is a JavaScript framework for robotics, physical computing, and the Internet of Things. It makes it incredibly easy to command robots and devices.

    All you need to get started is the `cylon` NPM module:

        $ npm install cylon

%section#hello-world
  :markdown
    ## The "Hello, World" Of Things

    This example will connect to an [Arduino](/documentation/platforms/arduino), and toggle an [LED](/documentation/drivers/led) every one second.

        :::javascript
        var Cylon = require("cylon");

        // Initialize the robot
        Cylon.robot({
          // Change the port to the correct port for your Arduino.
          connections: {
            arduino: { adaptor: 'firmata', port: '/dev/ttyACM0' }
          },

          devices: {
            led: { driver: 'led', pin: 13 }
          },

          work: function(my) {
            every((1).second(), function() {
              my.led.toggle();
            });
          }
        }).start();

    To run it:

        $ npm install cylon-firmata cylon-gpio cylon-i2c
        $ node script.js

    We've got [lots more examples here](/documentation/examples) to help you get started on your next IoT project.

%section#platforms
  %h2#platforms Platform Support

  %div
    %p Cylon.js has an extensible system for connecting to hardware devices. The following robotics and physical computing systems, and software platforms, are currently supported:

    %ul.platform-list
      - data.platforms.each do |name, info|
        %li.platform
          %a{:href => "/documentation/platforms/#{info.slug}"}
            %p.title= name
            %img{src: "/images/devices/#{info.slug}.jpg", style: "width: 90%"}
    .clear

  %p
    Support for many devices that use General Purpose Input/Output (GPIO) have a shared set of drivers provided using the
    = link_to "cylon-gpio", "https://github.com/hybridgroup/cylon-gpio", target:"_blank",  class: "external-link"
    module:

  %ul.platform-list
    - data.drivers.GPIO.each do |name, url|
      %li.platform
        %a{:href => "/documentation/drivers/#{url}"}
          %p.title= name
          %img{src: "/images/devices/#{url}.jpg", style: "width: 90%"}
    .clear

  %p
    Support for devices that use Inter-Integrated Circuit (I2C) have a shared set of drivers provded using the
    = link_to "cylon-i2c", "https://github.com/hybridgroup/cylon-i2c", target:"_blank",  class: "external-link"
    module:

  %ul.platform-list
    - data.drivers.I2C.each do |name, url|
      %li.platform
        %a{:href => "/documentation/drivers/#{url}"}
          %p.title= name
          %img{src: "/images/devices/#{url}.jpg", style: "width: 90%"}
    .clear

%section#user-contribution
  %h2 User Created Platforms

  %div
    %p In addition to our supported platforms, our wonderful users have created the following platforms:

    %h6
      = link_to "Parrot Rolling Spider", "https://github.com/ChrisTheBaron/cylon-rolling-spider", target:"_blank",  class: "external-link"
    %h6
      = link_to "PCDuino", "https://github.com/alexwang2013/cylon-pcduino", target:"_blank",  class: "external-link"
    %h6
      = link_to "iBeacon", "https://github.com/juliancheal/cylon-beacon", target:"_blank",  class: "external-link"
    %h6
      = link_to "Belkin Wemo", "https://github.com/ChrisTheBaron/cylon-wemo", target:"_blank",  class: "external-link"
    %h6
      = link_to "Myo", "https://github.com/adaemi/cylon-myo", target:"_blank",  class: "external-link"
      
    %p<
      If you have another platform you would like to add, please send us a
      = link_to " pull request.", "https://github.com/hybridgroup/cylon-site#send-your-pull-request", class: "external-link" 

%section#browser-mobile
  :markdown
    ## Browser & Mobile Support

    Cylon.js can be run directly in-browser, using the `browserify` NPM module. You can also run it from within a Chrome connected app, or a PhoneGap mobile app.

    For more info on browser support, and for help with different configurations, you can find more info [in our docs](/documentation/guides/browser-support).

%section#api
  :markdown
    ## API

    Cylon.js features an API plugin system which enables you to send commands, stream real time data, and monitor the overall state of your robots. We currently support the following API plugins:

    - [http/https (REST)](https://github.com/hybridgroup/cylon-api-http)

    - [socket.io](https://github.com/hybridgroup/cylon-api-socketio)

    - [mqtt](https://github.com/hybridgroup/cylon-api-mqtt)

    - and more coming soon!

    The Cylon.js HTTP plugin, for instance, allows you to interact with your robots over HTTP. You simply install the API plugin alongside Cylon.js with npm:

        $ npm install cylon-api-http

    Then, all you need to do is place the following command in your Cylon.js program:

        :::javascript
        var Cylon = require("cylon");

        Cylon.api('http');

    Once your Cylon.js program is running, visit `https://localhost:3000/` and you're ready to control your robots from a web browser!
    <img src="/images/screenshots/robeaux.jpg" style="margin-top: 15px; width: 100%">

    You can check out more information on the Cylon API in the docs [here](/documentation/api/http).

%section#cli
  :markdown
    ## CLI

    <script src="https://asciinema.org/a/10306.js" id="asciicast-10306" data-autoplay="1" data-loop="true"></script>

    Cylon uses the [Gort][] toolkit, so you can access important features from the command line.
    You can scan, connect to devices, update firmware, and more!
    We call it "RobotOps", a.k.a. "DevOps for Robotics".

    Cylon also has it's own CLI tool to generate new modules, robots, and drivers.

    You can check out the Cylon CLI docs [here][cli-docs].

    [Gort]: http://gort.io
    [cli-docs]: /documentation/guides/cli

%section#contribute
  :markdown
    ## Be Part of the Robot Evolution

    - Want updates on what we're working on? Follow us on [Twitter](https://twitter.com/CylonJS).

    - Get involved with Cylon.js projects, ask questions, or stay up to date with the latest Cylon.js news on our [mailing list](https://groups.google.com/forum/#!forum/cylonjs)!

    - If you'd like to find out more, check out our code on [GitHub](https://github.com/hybridgroup/cylon). You can also open a [new issue](https://github.com/hybridgroup/cylon/issues/new) if you need help, feel we can improve something, or have a feature suggestion.

    - If you want to talk to us, we can be found hanging out on IRC, `#cylon` on `irc.freenode.net`.

