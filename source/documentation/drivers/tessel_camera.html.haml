---
title: Cylon.js - Tessel Camera
author: The Hybrid Group
page_title: Tessel Module
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Tessel Camera
page_subtitle_docs: Module
layout: documentation
page_title_show: true
active_menu_docs: true
subnavjs: true
subnav_driver: true

tessel_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#tessel li:nth-child(5)").addClass("active-link");

%section.intro
  =image_tag "/images/devices/tessel-camera.jpg", class: "display"
  .info-intro
    :markdown
      Add the sense of sight to Tessel!

      Take pictures of your projects, from your projects.

      - Supports 640x480, 320x240, and 160x120
      - Still image camera.

      For more info visit [here](http://start.tessel.io/modules/camera).
  .clear

%section.how-to#HowToConnect
  :markdown
    ## How To Connect

        :::javascript
        Cylon.robot({
          connections: [
            { name: 'tessel', adaptor: 'tessel' },
            { name: 'tessel_A', adaptor: 'tessel', port: 'A' },
          ],

          devices: [
            { name: 'led', driver: 'led', pin: 1, connection: 'tessel' },
            { name: 'button', driver: 'button', connection: 'tessel' },
            { name: 'camera', driver: 'camera-vc0706', connection: 'tessel_A' },
          ],
        });


%section.how-to#HowToUse
  :markdown
    ## How To Use

    Example using a Direct Pin.

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connections: [
            { name: 'tessel', adaptor: 'tessel' },
            { name: 'tessel_A', adaptor: 'tessel', port: 'A' },
          ],

          devices: [
            { name: 'led', driver: 'led', pin: 1, connection: 'tessel' },
            { name: 'button', driver: 'button', connection: 'tessel' },
            { name: 'camera', driver: 'camera-vc0706', connection: 'tessel_A' },
          ],

          work: function(my) {
            my.camera.on('error', function (err) {
              console.log("Camera error: ", err);
            });

            my.camera.setCompression(0.4, function(err) {
              if (err) console.log("error setting compression: ", err);
            });

            my.button.on('push', function() {
              my.led.turnOn();
              my.camera.takePicture(function(err, image) {
                if (err) {
                  console.log('error taking image', err);
                } else {
                  // Name the image
                  var name = 'picture-' + Math.floor(Date.now()*1000) + '.jpg';
                  // Save the image
                  console.log('Picture saving as', name, '...');
                  process.sendfile(name, image);
                }
                my.led.turnOff();
              });
            });
          }
        }).start();

%section.public-methods
  .commands-api#Commands
    :markdown
      # Properties

      ## camera.resolutions()

      An object which maps resolution labels to their dimensions.
      The string labels can be used to configure the camera's resolution.

      ## camera.disable()

      Disable UART connection to camera. Closes connection & ends process.

      ## camera.setCompression( compressionFactor, callback(err) )

      Determine the amount of compression on each image.
      Should be a number between 0 and 1.
      Default is 0.2.
      Note that the compression is saved in Flash and will be persistent between power cycles.

      ## camera.setResolution( resolution, callback(err) )

      Set the size of images.
      Options are 'vga' (640x320), 'qvga'(320x240) or  'qqvga' (160x120 ).
      Default is 'vga'.
      Note that the resolution is saved in Flash and will be persistent between power cycles.

      ## camera.takePicture( callback(err, picture) )

      Take a still picture.
      Returns raw buffer data which you can pipe into a raw http stream or save in memory.

  .commands-api#Events
    :markdown
      # Events

      ## 'compression'

      Emitted when compression is set.

      ## 'error'

      Emitted upon error.

      ## 'picture'

      Emitted when a photo is taken. Returns buffer of image.

      ## 'ready'

      Emitted upon first successful communication between the Tessel and the module.

      ## 'resolution'

      Emitted when resolution is set.

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    = partial "documentation/partials/devices_platforms"
