---
title: Cylon.js - Pinoccio LED Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Pinoccio LED
page_subtitle_docs: Driver
layout: documentation
page_title_show: true
subnav_driver: true
active_menu_docs: true
subnavjs: true

pinoccio_platform: true
---
-content_for :js_accordion do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#pinoccio li:nth-child(1)").addClass("active-link");

%section.intro
  =image_tag "/images/devices/pinoccio_led.jpg", class: "display"
  .info-intro
    :markdown
      For more information click [here](https://pinocc.io/).

  .clear

%section.how-to#HowToConnect
  :markdown

    ## How To Connect
    Install the module with: `npm install cylon-pinoccio`

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {
            name: 'pinoccio',
            adaptor: 'pinoccio',
            token: 'XXX',
            troop: '1',
            scout: '1'
          },

          device: { name: 'led', driver: 'pinoccio-led' },
        });


%section.how-to#HowToUse
  :markdown
    ## How To Use

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {
            name: 'pinoccio',
            adaptor: 'pinoccio',
            token: 'XXX',
            troop: '1',
            scout: '1'
          },

          device: { name: 'led', driver: 'pinoccio-led' },

          work: function(my) {
            var isOn = false;
            my.led.blink(127, 127, 127);
            every((1).second(), function() {
              if (isOn === true) {
                isOn = false;
                my.led.turnOff();
              } else {
                isOn = true;
                my.led.turnOn();
              }
            });
          }
        }).start();


%section.public-methods
  .commands-api#Commands
    :markdown
      # Commands

      ## turnOn()

      Turns on the LED

      ## turnOff()

      Turns off the LED

      ## red()

      Sets the LED into a red color

      ## green()

      Sets the LED into a green color

      ## blue()

      Sets the LED into a blue color

      ## cyan()

      Sets the LED into a cyan color

      ## purple()

      Sets the LED into a purple color

      ## magenta()

      Sets the LED into a magenta color

      ## yellow()

      Sets the LED into a yellow color

      ## orange()

      Sets the LED into a orange color

      ## white()

      Sets the LED into a white color

      ## torch()

      Sets the torch of the LED

      ## hex(value)

      Sets an hexa color to the LED

      ##### Params

      - **value** - The value for which to return data

      ##### Returns

      `nil`

      ## rgb(r, g, b)

      Sets an RGB color to the LED

      ##### Params

      - **r** - The value for the red color
      - **g** - The value for the green color
      - **b** - The value for the blue color

      ##### Returns

      `nil`

      ## saveTorch(r, g, b)

      Saves the torch of the LED

      ##### Params

      - **r** - The value for the red color
      - **g** - The value for the green color
      - **b** - The value for the blue color

      ##### Returns

      `nil`

      ## blink(r, g, b)

      Makes the LED blink

      ##### Params

      - **r** - The value for the red color
      - **g** - The value for the green color
      - **b** - The value for the blue color

      ##### Returns

      `nil`

  .commands-api#Events
    :markdown
      # Events

      no events

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    = partial "documentation/partials/devices_platforms"
