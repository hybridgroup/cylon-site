---
title: Galileo with Cylon.js
author: The Hybrid Group
page_title: Platforms
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: Intel Galileo
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-galileo' target='_blank' class='repository'>Repository</a>| <a class+'issues' href='https://github.com/hybridgroup/cylon-galileo/issues' target='_blank'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
subnavjs: true

button_driver: true
continuous_servo_driver: true
led_driver: true
makey_driver: true
maxbotix_driver: true
motor_driver: true
servo_driver: true
blinkm_driver: true
hmc6352_compass_driver: true
mpl115a2_driver: true
lcd_driver: true

---
-content_for :js_accordeon do
  :javascript
    $("#platform-panel").addClass("active-panel");
    $("#platform-panel ul li:nth-child(9)").addClass("active-link");

%section.intro
  = image_tag "/images/devices/galileo.jpg", class: "display"
  .info-intro
    = partial '/hybridpages/partials/widgets/repo_issues'
    :markdown
      The Intel Galileo board is a microcontroller board based on the Intel Quark SoC X1000 application processor.
      It is intended to be compatible with shields designed for the Arduino Uno R3 or above.

      For more info about the Galileo platform click [here](http://www.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html).
  .clear

%section.how-to#HowToInstall
  :markdown
    ## How To Install

    Install the module with:

        $ npm install cylon-galileo

%section.how-to#HowToUse
  :markdown
    ## How To Use

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'galileo', adaptor: 'galileo' },
          device: { name: 'servo', driver: 'servo', pin: '9' },

          work: function(my) {
            // Be carefull with your servo angles or you might DAMAGE the servo!
            // Cylon uses a 50hz/s (20ms period) frequency and a Duty Cycle
            // of 0.5ms to 2.5ms to control the servo angle movement.
            //
            // This means:
            // 1. 0.5ms == 0 degrees
            // 2. 1.5ms == 90 degrees
            // 3. 2.5ms == 180 degrees
            // (It is usually safe to start with a 90 degree angle, 1.5ms duty
            // cycle in most servos)
            //
            // Please review your servo datasheet to make sure of correct
            // angle range and the Freq/MS Duty cycle it requires.
            // If more servo support is needed leave us a comment, raise an
            // issue or help us add more support.

            var angle = 30;
            var increment = 40;

            every((1).seconds(), function() {
              angle += increment;
              my.servo.angle(angle);
              console.log("Current Angle: " + my.servo.currentAngle());

              if ((angle === 30) || (angle === 150)) { increment = -increment; }
            });
          }
        }).start();

%section.how-to#HowToConnect
  %h2 How To Connect
  %h3 Setting up the Galileo bigger Linux image, connecting and updating node.js.
  %p Setting up Intel's Galileo board takes a bit more work than it should, but it is not difficult, luckily you only have to do it once (we hope :-)... ).
  %p
    The first step is to check we have the latest firmware and update if not.
    You can find instructions to update the firmware here:

  %p
    = link_to 'Galileo firmware update', 'https://learn.sparkfun.com/tutorials/galileo-getting-started-guide/updating-firmware'

  %p
    Next step is to install the bigger linux image into a MicroSD card and boot the
    Galileo from it.

  %p
    You can find the bigger linux image listed in the official Galileo drivers page (
    = link_to 'Galileo drivers', 'https://communities.intel.com/docs/DOC-22226'
    ), the one named:

  %p
    = link_to 'LINUX IMAGE FOR SD for Intel Galileo', 'http://downloadmirror.intel.com/23171/eng/LINUX_IMAGE_FOR_SD_Intel_Galileo_v1.0.0.7z'

  %p
    Please feel free to read through the getting started page, so you can get familiar with the board features.
    You can find all getting started info by clicking the following link:
  %p
    = link_to 'Official getting started guide', 'https://learn.sparkfun.com/tutorials/galileo-getting-started-guide'

  %p Once we have the bigger linux image in the sd card, and the galileo booting up from it, we need to connect and enable networking (turned off by default in the Galileo bigger linux image).
  %p
    We can accomplish this by using a serialport to terminal program, for this we have to use the Galileo Arduino IDE
    provided in the Galileo drivers page,
    = link_to 'Intel Galileo Arduino SW 1.5.3', 'https://communities.intel.com/docs/DOC-22226'
    , make sure to download and uncompress the correct one for your OS, after that upload the
    following sketch to the galileo board:


  :markdown
        :::cpp
        void setup()
        {
          system("cp /etc/inittab /etc/inittab.bak");  // Back up inittab
          // Replace all "S:2345" with "S0:2345"'s (switching serial ports):
          system("sed -i 's/S:2345/S0:2345/g' /etc/inittab");
          // Replace all "ttyS1" with "ttyGS0"'s (switching serial ports):
          system("sed -i 's/ttyS1/ttyGS0/g' /etc/inittab");
          // Replace all "grst" with "#grst"'s to comment that line out:
          system("sed -i 's/grst/#grst/g' /etc/inittab");
          // Replace all "clld" with "#clld"'s to comment that line out:
          system("sed -i 's/clld/#clld/g' /etc/inittab");
          system("kill -SIGHUP 1");
        }

        void loop()
        {

        }

  %p
    Once the board is connected to your computer, open up a serial terminal program
    (like
    = link_to 'Tera Term', 'https://learn.sparkfun.com/tutorials/terminal-basics/tera-term-windows'
    for Windows,
    = link_to 'Cool Term', 'https://learn.sparkfun.com/tutorials/terminal-basics/coolterm-windows-mac-linux'
    for Mac, or
    = link_to 'Serial port terminal', 'https://apps.ubuntu.com/cat/applications/oneiric/gtkterm/'
    for Ubuntu/Linux). Set the serial port number, and change the baud rate to 115200 bps.

  %p You can read more about serial to terminal communication in the getting started page here:

  %p
    = link_to 'Serial to terminal', 'https://learn.sparkfun.com/tutorials/galileo-getting-started-guide/using-the-terminal'

  %p When you have connected successfully to the Galileo run this command to enable networking (make sure to connect the board to the network using an ethernet cable first):
  :markdown
        :::bash
        $ /etc/init.d/networking start

  %p This will allow us to connect using SSH, substitute the ip address with the one assigned to your Galileo:
  :markdown
        :::bash
        $ ssh root@192.168.0.5

  %p The final step of the setup is to update the node.js version included in the galileo bigger linux image, you can download a more up to date package from  here:

  %p
    = link_to 'Node.JS 10.25', 'https://communities.intel.com/servlet/JiveServlet/download/221298-75632/nodejs_0.10.25-r0_i586.ipk.zip'

  %p Then we need to uncompress the file in the host computer:
  :markdown
        :::bash
        $ unzip nodejs_0.10.25-r0_i586.ipk.zip

  %p And copy the IPK package to the board, since the Galileo is already connected to the network (and we have an active session open that we can use) we can SCP the ipk package to update node.js to the galileo:
  :markdown
        :::bash
        $ scp nodejs_0.10.25-r0_i586.ipk root@192.168.0.5:/home/root/

  %p We then move to the Galileo terminal session and upgrade the installed node.js package by running the following command:
  :markdown
        :::bash
        opkg install nodejs_0.10.25-r0_i586.ipk

    Let's confirm node.js version by running `node -v`

        :::bash
    		$ node -v
    		v0.10.25

  %p Nice! We are good to go! With this we are pretty much setup to use Cylon.js in the Galileo.
  %p More details regarding updating node.js can be found here:

  %p
    = link_to 'How to update node.js in the SD card image', 'https://communities.intel.com/thread/48416'

  :markdown
    Install the module with: `npm install cylon-galileo`

  %h3 How to push code to your Galileo

  %p The Galileo is a special case (compared to Beaglebone black and Raspberry Pi) since it lacks dev tools in the bigger Linux image, so at this time we do not have a different distribution to run in the sd card that does contain dev tools, so we'll have to make it work with what we have.

  %p You'll need to write your code and install npm modules on your computer, at very least setup your project folder and install NPM modules, all of this using the 32bit version of both node.js and NPM modules.

  %p First we need to download the 32bit version of Node.js:

  %p http://nodejs.org/dist/v0.10.26/node-v0.10.26-linux-x86.tar.gz

  %p You'll need to uncompress and run node and npm from that directory, I recommend creating links to the bin/node and bin/npm files in your home folder, that way you can easily install npm libraries using the 32bit version (needed by Galileo) and maintain your current global node instalation without messing with your path.

  :markdown
        :::bash
        $ ln  ~/node-v0.10.26-linux-x86/bin/node ~/nodex86
        $ ln  ~/node-v0.10.26-linux-x86/bin/npm ~/npmx86

    Now, how to actually push code and run it in the Galileo, let's say we have a project folder called `galileo-blink`, we change directory intothe project folder, then we can either write our code there, in this case blink.js, or setup the project folder with all nedded NPM modules and work directly in the galileo board, of course all of this using the 32bit version of node.js we just installed:

  :markdown
        :::bash
        $ cd galileo-blink
        $ ~/npmx86 install cylon
        $ ~/npmx86 install cylon-galileo
        $ ~/npmx86 install cylon-gpio

    This will create the `./node_modules/` folder in our project containing all the necessary modules that will run in the Galileo, so from here we can either work on our project and push the code later just for testing in the galileo, or push the modules and work directly in the Galileo, let's do the latter since makes development easier and quicker than having to push everytime we do a small change:

  :markdown
        :::bash
        # From our project root folder run
        $ cd ../
        $ tar -cf galileo-blink.tar ./galileo-blink
        $ scp galileo-blink.tar root@192.168.0.5:/home/root/

  %p Once the project package finishes copying we go to our galileo session, and in the terminal we run the following:

  :markdown
        :::bash
        $ cd ~
        $ tar -xf galileo-blink.tar
        $ cd galileo-blink
        $ vi blink.js

  %p We now have our environment ready to run the examples in the galileo, just copy paste the blink example (found in the examples section below), save it and run it.

  :markdown
        :::bash
        # From project root folder
        $ node blink.js


%section.drivers#Drivers
  %h2 Drivers
  %p Available drivers for the Galileo platform are listed below.

  .hardware
    %h2 GPIO Drivers
    .devices
      = partial "documentation/partials/devices_gpio_drivers"
