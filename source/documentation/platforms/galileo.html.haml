---
title: Galileo with Cylon.js
author: The Hybrid Group
page_title: Platforms
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: Intel Galileo
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-galileo' target='_blank' class='repository'>Repository</a>| <a class+'issues' href='https://github.com/hybridgroup/cylon-galileo/issues' target='_blank'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
subnavjs: true

button_driver: true
continuous_servo_driver: true
led_driver: true
makey_driver: true
maxbotix_driver: true
motor_driver: true
servo_driver: true
blinkm_driver: true
hmc6352_compass_driver: true
mpl115a2_driver: true
lcd_driver: true

---
-content_for :js_accordeon do
  :javascript
    $("#platform-panel").addClass("active-panel");
    $("#platform-panel ul li:nth-child(9)").addClass("active-link");

%section.intro
  = image_tag "/images/devices/galileo.jpg", class: "display"
  .info-intro
    = partial '/hybridpages/partials/widgets/repo_issues'
    :markdown
      The Intel Galileo board is a microcontroller board based on the Intel Quark SoC X1000 application processor.
      It is intended to be compatible with shields designed for the Arduino Uno R3 or above.

      For more info about the Galileo platform click [here](http://www.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html).
  .clear

%section.how-to#HowToInstall
  :markdown
    ## How To Install

    Install the module with:

        $ npm install cylon-galileo

%section.how-to#HowToUse
  :markdown
    ## How To Use

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'galileo', adaptor: 'galileo' },
          device: { name: 'servo', driver: 'servo', pin: '9' },

          work: function(my) {
            // Be carefull with your servo angles or you might DAMAGE the servo!
            // Cylon uses a 50hz/s (20ms period) frequency and a Duty Cycle
            // of 0.5ms to 2.5ms to control the servo angle movement.
            //
            // This means:
            // 1. 0.5ms == 0 degrees
            // 2. 1.5ms == 90 degrees
            // 3. 2.5ms == 180 degrees
            // (It is usually safe to start with a 90 degree angle, 1.5ms duty
            // cycle in most servos)
            //
            // Please review your servo datasheet to make sure of correct
            // angle range and the Freq/MS Duty cycle it requires.
            // If more servo support is needed leave us a comment, raise an
            // issue or help us add more support.

            var angle = 30;
            var increment = 40;

            every((1).seconds(), function() {
              angle += increment;
              my.servo.angle(angle);
              console.log("Current Angle: " + my.servo.currentAngle());

              if ((angle === 30) || (angle === 150)) { increment = -increment; }
            });
          }
        }).start();

%section.how-to#HowToConnect
  :markdown
    ## How To Connect

    ### Setting up Galileo Linux Image

    Setting up the Galileo for Cylon takes longer than it should, but it's not terribly difficult.
    Luckily, you only have to do it once.

    The first step is to ensure we have the latest version of the firmware, and update if not.
    You can find instructions to update the firmware [here](https://learn.sparkfun.com/tutorials/galileo-getting-started-guide/updating-firmware).

    Next, we're going to install the larger Linux image for the Galileo on a MicroSD card, and boot the Galileo from it.

    You can find the larger image on the official Galileo [drivers page](https://communities.intel.com/docs/DOC-22226).
    You're looking for the one named [LINUX IMAGE FOR SD for Intel Galileo](http://downloadmirror.intel.com/23171/eng/LINUX_IMAGE_FOR_SD_Intel_Galileo_v1.0.0.7z).

    Please feel free to read through the Galileo [getting started page](https://learn.sparkfun.com/tutorials/galileo-getting-started-guide).
    This will help you get better acquainted with the features of the board.

    Once you have the larger image on the SD card, slot it into the Galileo, and the board should automatically boot from it.

    After it's started up, we need to connect and enable networking (turned off by default in the image).

    We can accomplish this using a serialport to terminal program.
    To do this, we have to use the Galileo Arduino IDE.
    This is also provided from the Galileo drivers page, but [here](https://communities.intel.com/docs/DOC-22226) is a direct link.

    Make sure to download the version for your OS.

    After you've got that running, upload this sketch to your Galileo:

        :::cpp
        void setup()
        {
          system("cp /etc/inittab /etc/inittab.bak");  // Back up inittab
          // Replace all "S:2345" with "S0:2345"'s (switching serial ports):
          system("sed -i 's/S:2345/S0:2345/g' /etc/inittab");
          // Replace all "ttyS1" with "ttyGS0"'s (switching serial ports):
          system("sed -i 's/ttyS1/ttyGS0/g' /etc/inittab");
          // Replace all "grst" with "#grst"'s to comment that line out:
          system("sed -i 's/grst/#grst/g' /etc/inittab");
          // Replace all "clld" with "#clld"'s to comment that line out:
          system("sed -i 's/clld/#clld/g' /etc/inittab");
          system("kill -SIGHUP 1");
        }

        void loop()
        {

        }

    Once the board's connected to your computer, you can connect to it with a serial terminal program.
    Some example programs:

    - [Tera Term](https://learn.sparkfun.com/tutorials/terminal-basics/tera-term-windows) for Windows
    - [Cool Term](https://learn.sparkfun.com/tutorials/terminal-basics/coolterm-windows-mac-linux) for OS X
    - [GTKTerm](https://apps.ubuntu.com/cat/applications/oneiric/gtkterm/) for Linux

    Set the serial port number, and change the baud rate to 115200 bps.

    When you have a successful connection to the Galileo, run this command to enable networking:

        $ /etc/init.d/networking start

    This will allow us to SSH into the board.
    Substitute the IP address for that of your Galileo and connect:

        $ ssh root@192.168.0.5


    The last bit of setup is to update the version of Node included with the Linux image.
    You can download a more up-to-date version [here](https://communities.intel.com/servlet/JiveServlet/download/221298-75632/nodejs_0.10.25-r0_i586.ipk.zip).

    Uncompress the file on your host computer, and copy the package to the board:

        $ unzip nodejs_0.10.25-r0_i586.ipk.zip
        $ scp nodejs_0.10.25-r0_i586.ipk root@192.168.0.5:/home/root/

    Then, on the Galileo, install the package with the `opkg` command:

        $ opkg install nodejs_0.10.25-r0_i586.ipk

    With that done, make sure the update worked:

        $ node -v
        v0.10.25

    If you need more details on updating Node in the Galileo image, they can be found [here](https://communities.intel.com/thread/48416).

    And with that all done, we can install the `cylon-galileo` module to the board:

        $ npm install cylon-galileo

    ### Pushing Code

    The Galileo is a special case (compared to the BeagleBone Black and Raspberry Pi), since it doesn't have any dev tools in the larger Linux image.
    You'll need to write code and install NPM modules on your host computer.

    Additionally, to compile for the 32-bit architecture on the Galileo, you'll need to run a 32-bit version of Node on your host machine.

    You can download the appropriate version from the Node [download page](http://nodejs.org/download/).

%section.drivers#Drivers
  :markdown
    ## Drivers

    Available drivers for the Galileo platform are listed below.

  .hardware
    %h2 GPIO Drivers
    .devices
      = partial "documentation/partials/devices_gpio_drivers"
