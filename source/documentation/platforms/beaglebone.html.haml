---
page_title_show: true
title: BeagleBone with Cylon
author: The Hybrid Group
page_title: Platforms
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: BeagleBone
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-beaglebone' class='repository'>Repository</a>| <a class='issues' href='https://github.com/hybridgroup/cylon-beaglebone/issues'>Issues</a>"
layout: documentation
subnav_platform: true
active_menu_platforms: true
subnavjs: true

analog_sensor_driver: true
button_driver: true
continuous_servo_driver: true
direct_pin_driver: true
led_driver: true
makey_driver: true
maxbotix_driver: true
motor_driver: true
servo_driver: true
blinkm_driver: true
hmc6352_compass_driver: true
mpl115a2_driver: true
lcd_driver: true
bmp180_driver: true
mpu6050_driver: true
ir_range_finder: true

---
-content_for :js_accordeon do
  :javascript
    $("#platform-panel").addClass("active-panel");
    $("#platform-panel ul li:nth-child(5)").addClass("active-link");

%section.intro
  = image_tag "/images/devices/beaglebone.jpg", class: "display"
  .info-intro
    = partial '/hybridpages/partials/widgets/repo_issues'
    %p The BeagleBone is an ARM based single board computer, with many different GPIO interfaces built in.
    %p
      For more info about the BeagleBone platform click
      = succeed "." do
        = link_to "here", "http://beagleboard.org/Products/BeagleBone", target: :blank
  .clear

%section.how-to#HowToInstall
  %h2 How To Install
  %p Installing Cylon.js for beaglebone is pretty easy.
  :markdown
        :::bash
        npm install cylon-beaglebone

%section.how-to#HowToUse
  %h2 How To Use
  %p This small program causes an LED and a button.
  :markdown
        :::javascript
        var Cylon = require('cylon');

        // Initialize the robot
        Cylon.robot({
          connection: { name: 'beaglebone', adaptor: 'beaglebone' },
          devices: [{name: 'led', driver: 'led', pin: 'P9_12'},
                    {name: 'button', driver: 'button', pin: 'P9_14'}],

          work: function(my) {
            my.button.on('push', function() {my.led.toggle()});
          }
        }).start();


%section.how-to#HowToConnect
  %h2 How To Connect
  %p
    You will probably want to connect your development machine to the Beaglebone Black while working on your embedded code. You can do this easily by just plugging in your USB cable from your machine to the BBB. Once you get your local machine machine setup with some drivers or config changes, you will be able to connect via Ethernet Over USB, and also power the BBB via the same cable.

  %h3 OSX
  %h4 Installing Beaglebone Black drivers on OSX.
  %p
    For OSX some drivers need to be installed. You can find all driver related docs in the Beaglebone site:
  %a{href: "http://beagleboard.org/Getting+Started#step2"} Beaglebone Driver Docs

  %h4 Connecting to Beaglebone Black OSX.
  %p Once installed, you just SSH into the Beaglebone black, the IP address is 192.168.7.2

  %h3 Linux
  %h4 Installing Beaglebone Black drivers on Linux.
  %p
    For Linux you need to create a udev rule. You can find all related docs in the Beaglebone site:
  %a{href: "http://beagleboard.org/Getting+Started#step2"} Beaglebone Driver Docs

  %h4 How to connect on Linux
  %p
    Save the following script as bbb_sh.sh (or whatever name you prefer) and use this script to ssh into your Beaglebone Black.

  :markdown
        #!/bin/bash
        sudo -- sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
        sudo iptables -A POSTROUTING -t nat -j MASQUERADE
        ssh root@192.168.7.2

  %p After the script is saved in your computer it is pretty easy to connect by just running it.

  :markdown
        $ sudo sh bbb_ssh.sh

  %h3 Windows
  %h4 Installing Beaglebone Black drivers on Windows.
  %p
    For Windows some drivers need to be installed. You can find all driver related docs in the Beaglebone site:
  %a{href: "http://beagleboard.org/Getting+Started#step2"} Beaglebone Driver Docs

  %h4 How to connect on Windows
  %p The process in Windows requires more steps to setup, but when done should be equally easy to connect to the board.

  %ol
    %li
      First follow this guide for setting up internet sharing on your windows computer,
      %a{ href: "http://lanceme.blogspot.com/2013/06/windows-7-internet-sharing-for.html" } Windows Internet Sharing
      , Only follow the sections titled "On the Windows 7 computer".
    %li
      You need to instal putty (or your preffered SSH client) to SSH into the Beaglebone Black,
      %a{ href: "http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" } download Putty.
    %li Finally, you can ssh into the Beaglebone Black using Putty (or the SSH client you installed) in the same way we do it in OSX, The Beaglebone Black's IP address is 192.168.7.2

  :markdown
        $ ssh root@192.168.7.2



  %h3 Configuring the Beaglebone Black
  %p
    Now, SSH in to the Beaglebone Black using the <code>bbb_ssh.sh</code> script you just created. Once you are connected, save the following script into your <code>~/.profile</code> file ON THE BEAGLEBONE BLACK which will allow your Beaglebone Black to share your computer's Internet connection.

  :markdown
        #!/bin/bash
        ROUTE=`route | grep 0.0.0.0 | wc -l`
        if [ $ROUTE -eq 0 ]
        then
            sudo -- sh -c 'echo "nameserver 8.8.8.8" >> /etc/resolv.conf'
            sudo /sbin/route add default gw 192.168.7.1
            ping www.google.com -q -c2 > /dev/null
            if [ $? -eq 0 ]; then
                sudo ntpdate ntp.ubuntu.com
            fi
        fi

  %p After the script is saved it will automatically run each time you boot the BBB, so you only have to do this once.

  %h3 Login Credentials
  %p After all the previous work and connecting through SSH you are going to need some credentials to login to the Beaglebone Black OS, the creds are as follows:
  %ul
    %li User: root
    %li Password: (none)

  %h3 (Optional) VNC connection
  %p
    The Beaglebone Black has been preloaded with vnc and the xfce desktop environment. You may start vnc by logging into the Beaglebone Black and executing
  :markdown
        $ sh ~/start_vnc.sh

  %p
    The Beaglebone Black now has an active vnc session on 192.168.7.2:1 with the password robotvnc

  %p
    I'll admit that was a bit long for a setup process (let me tell you a secret, we are not done yet :-S ... ), but hopefully not too complicated,
    just a bit on the long side, now you have a full Linux system running in you Beaglebone Black! Congrats... now on to the next
    and final part, resizing the SD card partition.

  %h3 Resizing the SD Card partition
  %p
    We now have our full Debian Linux OS setup, ready and working in our Beaglebone Black, and we are able to connect using SSH, so what's next? well we need
    some space in that SD card partition to do all of our work and install all of our code, thankfully that is quite simple, all that we require is to run
    some commands and reboot the board a couple of times, so let's dive into it.

  %p First login to the board using SSH and run the following commands
  :markdown
        $ fdisk /dev/mmcblk0
        d
        2
        n
        p
        2


        w
        $ shutdown -r now

  %p After the board has rebooted, we log back in and execute the following commands
  :markdown
        $ resize2fs /dev/mmcblk0p2
        $ shutdown -r now

  %p
    Once again we wait for the board to reboot and log back in to make sure the partition has been resized successfully by running
  :markdown
        $ df -h

  %p
    The /dev/root partition should be the size of the entire SD card, and with this
    we are finally done to start running Cylon directly on the Beaglebone Black.

  %h2 Creating a Beaglebone Black SD Card With Debian
  %p
    You might need to create a bootable SD card with the Beaglebone Black Debian-based Linux. 

  Here are instructions on how to do so.

  %h3 OSX
  %h4 Finding the SD card disk name
  %ul
    %li Insert your SD card into your host computer
    %li Determine the name of your SD card, ie /dev/sdb

  %p
    On OS X, you can use the diskutil command to help figure out the name of your card.
  :markdown
        :::bash
        $ diskutil list
        /dev/disk0
           #:                       TYPE NAME                    SIZE       IDENTIFIER
           0:      GUID_partition_scheme                        *500.3 GB   disk0
           1:                        EFI EFI                     209.7 MB   disk0s1
           2:                  Apple_HFS Macintosh HD            499.4 GB   disk0s2
           3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
        /dev/disk1
           #:                       TYPE NAME                    SIZE       IDENTIFIER
           0:     FDisk_partition_scheme                        *15.9 GB    disk1
           1:                 DOS_FAT_32 UNTITLED                15.9 GB    disk1s1
  %p
    In this case, our disk's name is /dev/disk1. Before you proceed, make sure to eject the mounted volume with diskutil unmount /dev/disk1s1.

  %h3 Linux
  %h4 Finding the SD card disk name
  %ul
    %li Insert your SD card into your host computer
    %li Determine the name of your SD card, ie /dev/sdb

  %p
    On most Linux distros, you should be able to use the `df -h` command to help you find what the name of your disk is.

  %h4 Downloading the Linux image and flashing the SD card
  %p
    Once the host computer drivers (udev-rules in the Linux case) have been installed, we need to flash the Linux image (our OS runing in the
    Beaglebone Black) to the SD card, we are using an Ubuntu based distro for our current Beaglebone Black dev env. Steps to acomplish this are as follows.

  %ol
    %li Download current Beaglebone Black Linux image
    %li Uncompress Linux image
    %li Flash Linux image to SD card

  %h4 Downloading the Beaglebone Black Linux image
  %p Pretty straight forward when you have a direct link to download, here it is:

  %a{href: "http://debian.beagleboard.org/images/bone-debian-7.5-2014-05-14-2gb.img.xz"} Beaglebone Black Debian Linux image

  %p If you prefer to use the terminal (we know you do :-) ):
  :markdown
        $ curl -O http://debian.beagleboard.org/images/bone-debian-7.5-2014-05-14-2gb.img.xz

  %h4 Uncompressing the image file
  %p
    Once the image has finished downloading, uncompress it to your working folder using your favorite tool, or once again
    use your favorite command line interface and run this command.

  :markdown
        $ unxz bone-debian-7.5-2014-05-14-2gb.img.xz

  %h4 Flashing the SD card
  %p
    The final step in setting up the SD card is to actually flashing the image we just downloaded and uncompressed into the sd card. You can accomplish just that by running the following command(make sure to specify the appropiate `/dev/sdX` device that represents your SD Card).

  :markdown
        $ sudo dd bs=1M if=./bone-debian-7.5-2014-05-14-2gb.img of=/dev/sdb && sudo sync

  %h4 Download, uncompress and flash Linux image in three commands
  %p
    A recap of the commands used in the steps above, in case you just want to see what was done to have a working Beaglebone Black OS flashed to the SD card.

  :markdown
        $ curl -O http://debian.beagleboard.org/images/bone-debian-7.5-2014-05-14-2gb.img.xz
        $ unxz bone-debian-7.5-2014-05-14-2gb.img.xz
        $ sudo dd bs=1M if=./bone-debian-7.5-2014-05-14-2gb.img of=/dev/sdb && sudo sync

  %h3 Windows
  %h4 Coming soon...

%section.drivers#Drivers
  %h2 Drivers
  %p All Cylon.js Digital, Analog & PWM GPIO drivers, as well as i2c drivers listed below should work with the BeagleBone:

  .hardware
    %h2 GPIO Drivers
    .devices
      = partial "documentation/partials/devices_gpio_drivers"
    %h2 i2c Drivers
    .devices
      = partial "documentation/partials/devices_i2c_drivers"
