---
title: Force with Cylon.js
author: The Hybrid Group
page_title: Platforms - Force
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: Force
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-force' class='repository'>Repository</a>| <a class+'issues' href='https://github.com/hybridgroup/cylon-force/issues'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
subnavjs: true
---
%section.intro
  = image_tag "/images/devices/force.jpg", class: "display"
  .info-intro
    %h4.subtitle= current_page.data.page_subtitle_docs
    :markdown
      This modules provides an adaptor + driver combination for communicating with the Salesforce Force.com platform.

      It uses the official [jsforce](https://github.com/jsforce/jsforce) module.

      For more info about the Force platform, click [here](http://www.salesforce.com/platform/overview/).

  .clear

%section#HowToInstall
  :markdown
    ## How To Install

        $ npm install cylon-force

%section#HowToUse
  :markdown
    ## How To Use

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {
            name: 'sfcon',
            adaptor: 'force',
            sfuser: process.env.SF_USERNAME,
            sfpass: process.env.SF_SECURITY_TOKEN
          },

          device: {name: 'salesforce', driver: 'force'},

          work: function(me) {
            me.salesforce.subscribe('SpheroMsgOutbound', function(data) {
              console.log(data);
            });

            var i = 0 ;
            every((2).seconds(), function() {
              var toSend = {spheroName: 'globo', bucks: i++}
              me.salesforce.push('/SpheroController/', toSend);
            });
          }
        });

        Cylon.start();


    To run the above example:

        $ SF_USERNAME='yourusername' SF_SECURITY_TOKEN='yourpasswordandtoken' node salesforce.js

%section#HowToConnect
  :markdown
    ## How To Connect

    ### Salesforce Setup
    1. First you'll need an account on DeveloperForce. If you don't already have one, you can create one at: http://developer.force.com/join

    2. Next, you need to configure a new connected app in your developer profile in order to retrieve all the keys, tokens, urls nedded to connect your app with SalesForce. In order to do this:
      * Go to -> `Setup (top)` > `Create (side)` > `Apps` > `Connected Apps` (scroll down ) > `New` Check "Enable Oauth Settings".
      * Next, add all permissions. Use "http://localhost:3000/oauth/_callback" as your callback URL.
      * You'll be using the Oauth2 web server flow, so you need your personal security code. If you don't have one, you'll need to reset it for Salesforce to email it to you.
      * Go to your Profile by clicking in your name (top right) > `My Settings` > `Personal` (left menu) > `Reset my security token`. After that Salesforce should email it to you.
      * You'll need your password + security token to be able to login (PASSWORDsecurityCode (concatenated, no space)).

    3. Now we need to setup an object with a couple of custom fields for streaming communication. In this example we'll create a new object and call it 'Sphero_Message':
      We also add two custom fields to this object: 'Sphero_Name' and 'Bucks'.
      * Go to `Setup` -> `Create` -> `Object` -> `New Custom Object` and name it `Sphero_Message`, then click `Save`.
      * Once in the `Object Details` view create two custom fields, `Sphero_Name` and `Bucks` both of type text.
      * We've created a Salesforce package that installs the Sphero_Message Object and the apexRest class for you to speed things up. Install it [here](https://login.salesforce.com/packaging/installPackage.apexp?p0=04ti00000004IoN)

    4. Setup apexRest code so we can create new objects using RESTfull implementation:
      * Go click in in you profile name (top right) > `Developer Console`.
      * When the developer console opens click `File` > `New Apex Class`, name it SpheroApex and then copy/paste the following code to that window:

                @RestResource(urlMapping='/SpheroController/*')
                global with sharing class SpheroController {
                  @HttpPost
                    global static void create(String spheroName, String bucks) {
                      SpheroController.handleSpheroMessage(spheroName, bucks);
                    }

                  public static void handleSpheroMessage(String spheroName, String bucks) {
                    Sphero_Message__c sm = new Sphero_Message__c();
                    sm.Sphero_Name__c = spheroName;
                    sm.Bucks__c = bucks;
                    insert sm;
                  }
                }

      * Save the SpheroApex class, `File` > `Save`.

    5. To be able to stream we need to setup a PushTopic to connect to.
      * Go to `Developer Console` click on `Debug` -> `Open Execute Anonymus Code` or (Ctrl+E)
      * Add the following code to create the new pushTopic with the query you want to execute and the events you want it to report.

                PushTopic pt = new PushTopic();
                pt.apiversion = 28.0;
                pt.name = 'SpheroMsgOutbound'; pt.description = 'All new Sphero Message records';
                pt.query = 'SELECT Id, Name, Sphero_Name__c, Bucks__c FROM Sphero_Message__c';
                insert pt;
                System.debug('Created new PushTopic: '+ pt.Id);

    6. At this point everything in salesforce should be ready and we should be able to connect, authenticate, push/create records through apexRest and stream information using the pushTopic.

%section.drivers#Drivers
  :markdown
    ## Drivers

    There is only a single driver as listed below for cylon-force:

  .hardware
    .devices
      = partial "/partials/devices_for_platform", locals: { platform: "Salesforce" }
