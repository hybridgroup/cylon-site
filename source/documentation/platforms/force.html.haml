---
title: Force with Cylon.js
author: The Hybrid Group
page_title: Platforms
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: Force
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-force' class='repository'>Repository</a>| <a class+'issues' href='https://github.com/hybridgroup/cylon-force/issues'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
subnavjs: true

force_drivers: true
---
-content_for :js_accordion do
  :javascript
    $("#platform-panel").addClass("active-panel");
    $("#platform-panel ul li:nth-child(8)").addClass("active-link");

%section.intro
  = image_tag "/images/devices/force.jpg", class: "display"
  .info-intro
    = partial '/hybridpages/partials/widgets/repo_issues'
    :markdown
      This modules provides an adaptor + driver combination for communicating with the Salesforce Force.com platform.

      It uses the official [jsforce](https://github.com/jsforce/jsforce) module.

      For more info about the Force platform, click [here](http://www.salesforce.com/platform/overview/).

  .clear

%section.how-to#HowToInstall
  :markdown
    ## How To Install

        $ npm install cylon-force

%section.how-to#HowToUse
  :markdown
    ## How To Use

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {
            name: 'sfcon',
            adaptor: 'force',
            sfuser: process.env.SF_USERNAME,
            sfpass: process.env.SF_SECURITY_TOKEN
          },

          device: {name: 'salesforce', driver: 'force'},

          work: function(me) {
            me.salesforce.subscribe('SpheroMsgOutbound', function(data) {
              console.log(data);
            });

            var i = 0 ;
            every((2).seconds(), function() {
              var toSend = {spheroName: 'globo', bucks: i++}
              me.salesforce.push('/SpheroController/', toSend);
            });
          }
        });

        Cylon.start();


    To run the above example:

        $ SF_USERNAME='yourusername' SF_SECURITY_TOKEN='yourpasswordandtoken' node salesforce.js

%section.how-to#HowToConnect
  :markdown
    ## How To Connect

    ### SalesForce Setup

    First, you'll need an account on DeveloperForce.
    If you don't have one already, you can create one [here](http://developer.force.com/join).

    Next, you'll need to configure a connected app in your developer profile.
    This needs to be done to retrieve the necessary keys, tokens, and URLs necessary to connect your robot to SalesForce.

    Here's the steps to do this:

    1. Go to Setup (top) -> Create (side) -> Apps -> Connected Apps (scroll down) -> New
    2. Check "Enable OAuth Settings"
    3. Next, add all permissions. Use `http://localhost:3000/oauth/_callback` as your callback URL.

    You'll be using the password and your personal security token.
    If you don't have one, go to your Profile and click reset security token and Salesforce should email it to you.

    To get this:

    1. Setup -> My Personal Information -> Reset My Security Code.

    You'll need your password and security token to login (`passwordSECURITYCODE` concatenated, no space).

    We've created a SalesForce package that installs the Sphero_Message object and the apexRest class for you to speed things up.
    You can find it [here](https://login.salesforce.com/packaging/installPackage.apexp?p0=04ti00000004IoN).

    Now, we'll need to setup a custom object for streaming communication.
    In this example we'll create a new object and call it 'Sphero_Message': We also add two custom fields to this object: 'Sphero_Name' and 'Bucks'.

    1. Go to Setup -> Create -> Object -> New
    2. Call it "Sphero_Message"
    3. Create custom attributes "Sphero_Name" and "Bucks", both of them should be the text type.

    Next, we need to setup apexRest code, so we can create new objects using the REST API:

    1. Go click My Profile -> Developer Console.
    2. When the console opens, click File -> New -> Apex Class
    3. Add the following code:

    <br>

        @RestResource(urlMapping='/SpheroController/*')
        global with sharing class SpheroController {
          @HttpPost
            global static void create(String spheroName, String bucks) {
              SpheroController.handleSpheroMessage(spheroName, bucks)
            }

          public static void handleSpheroMessage(String spheroName, String bucks) {
            Sphero_Message__c sm = new Sphero_Message__c();
            sm.Sphero_Name__c = spheroName;
            sm.Bucks__c = bucks;
            insert sm;
          }
        }

    To be able to stream, we need a PushTopic to connect to.

    1. Go to Developer Console -> Debug -> Open Execute Anonymous Code
    2. Add the following code to create the new PushTopic with the query you want to execute, and the events you wish it to report:

    <br>

        PushTopic pt = new PushTopic();
        pt.apiversion = 28.0;
        pt.name = 'SpheroMsgOutbound'; pt.description = 'All new Sphero Message records';
        pt.query = 'SELECT Id, Name, Sphero_Name__c, Bucks__c FROM Sphero_Message__c';
        insert pt;
        System.debug('Created new PushTopic: '+ pt.Id);

    At this point, everything on the SalesForce end should be ready.
    We should now be able to connect, authenticate, push/create records through apexRest, and stream information using the pushTopic.

%section.drivers#Drivers
  :markdown
    ## Drivers

    There is only a single driver as listed below for cylon-force:

  .hardware
    .devices
      = partial "documentation/partials/devices_force_drivers"
