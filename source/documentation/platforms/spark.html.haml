---
title: Spark with Cylon.js
author: The Hybrid Group
page_title: Platforms - Spark
page_subtitle: Cylon has an extensible system for connecting to hardware devices.
page_title_docs: Spark
page_subtitle_docs: "<a href='https://github.com/hybridgroup/cylon-spark' target='_blank' class='repository'>Repository</a>| <a class='issues' href='https://github.com/hybridgroup/cylon-spark/issues' target='_blank'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
subnavjs: true
---
%section.intro
  = image_tag "/images/devices/spark.jpg", class: "display"
  .info-intro
    %h4.subtitle= current_page.data.page_subtitle_docs
    :markdown
      The Spark Core contains a Wi-Fi connected microcontroller.
      Once it connects to a Wi-Fi network, it automatically connects with a central server (the "Spark Cloud") and stays connected so it can be controlled from external systems, such as a Cylon.js program.

      For more info about the Spark platform, click [here](https://www.spark.io/).
  .clear

%section#HowToInstall
  :markdown
    ## How To Install

        $ npm install cylon-spark

    You'll need your <code>access_token</code> and <code>device_id</code> to push new software to your Spark.
    You can get both of these from Spark's [Build tool](https://spark.io/build).

    - **access_token:** In the Build tool, click on the Settings cog in the bottom-left corner to find your access token.
    - **device_id:** After you have your Spark Core registered to your account through the Tinker app, click on the Cores section (just above the Settings cog) on the Build tool. Then, click on the arrow next to your core's name to get its device ID.

    ## Installing Firmware On Your Spark Core

    You will need to install the appropriate firmware on your Spark Core to use it from Cylon.js.

    One option is to use the Tinker software, which has the same API as the "default.cpp" code that is included with the [Gort CLI](http://gort.io).
    This routes all of your calls through the Spark cloud, with is appropriate for communicating with Spark devices in a remote location.

    Another option is to use the VoodooSpark firmware, which communicates directly to the Spark over your local connection.
    This discovers your device thru the Spark cloud, and then routes all of your calls directly to the Spark Core device.
    This is appropriate for communicating with Spark devices on the same local subnet as the computer that you wish to control them from.

    For more information on how to program your Spark, please see [Spark's examples](http://docs.spark.io/#/examples).

    For more information about VoodooSpark, click [here](http://voodoospark.me).

%section#HowToUse
  :markdown
    ## How To Use

    ### Spark using Tinker API:

        :::javascript
        var Cylon = require('cylon');

        // Initialize the robot
        Cylon.robot({
          connection: { name: 'spark', adaptor: 'spark', accessToken: 'XYZPDQ123', deviceId: '123ABC456' },
          device: { name: 'led', driver: 'led', pin: 'D0' },

          work: function(my) {
            every((1).second(), function() {
              my.led.toggle()
            });
          }
        }).start();

    ### Spark using VoodooSpark API:

        :::javascript
        var Cylon = require('cylon');

        // Initialize the robot
        Cylon.robot({
          connection: { name: 'voodoospark', adaptor: 'voodoospark', accessToken: 'XYZPDQ123', deviceId: '123ABC456', module: 'spark' },
          device:  { name: 'led', driver: 'led', pin: 'D0' },

          work: function(my) {
            every((1).second(), function() {
              my.led.toggle();
            });
          }
        }).start();

%section.public-methods#PublicMethods
  .commands-api
    = partial "/documentation/drivers/partials/spark/commands"
    :markdown
      **Note:** In addition to the above methods, the Spark adaptor supports the full GPIO pin interface, as long as you are using Tinker, or a Tinker compatible program running on the Spark itself.

%section#HowToConnect
  :markdown
    ## How to Connect

    The setup process for the Spark core is fully explained by [their docs](http://docs.spark.io/connect/), and requires only an active internet connection with a WiFi access point.

    Once your Spark is connected, you can get the `accessToken`` and `deviceId` necessary to communicate with it from Cylon.

%section.drivers#Drivers
  :markdown
    ## Drivers

    Available drivers for the Spark platform are listed below:

  .hardware
    %h2 GPIO Drivers
    .devices
      = partial "/partials/devices_for_platform", locals: { platform: "Spark" }
